{"version":3,"sources":["Button.js","components/NavBar.js","Context.js","components/products/Product.js","components/products/ProductList.js","components/cart/CartList.js","components/cart/Cart.js","components/Default.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","props","cart","Navbar","className","to","Component","ProductContext","React","createContext","ProductProvider","state","products","detailProduct","cartSubTotal","cartTax","cartTotal","setProducts","getItem","id","filter","prd","handleDetail","console","log","addToCart","p","total","price","count","inCart","cartContent","setState","addTotal","increment","decrement","removeItem","res","clearCart","checkOut","subTotal","map","item","tax","parseFloat","toFixed","axios","get","then","response","prds","data","Provider","value","this","children","ProductConsumer","Consumer","Product","product","img","src","onClick","e","ProductList","key","CartList","width","height","title","Cart","Fragment","Default","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8fad491.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  text-transform: capitalize;\n  font-size: 1.43rem;\n  background: transparent;\n  border: 0.05em solid var(--lightBlue);\n  color: ${props => (props.cart ? \"var(--mainYellow)\" : \"var(--lightBlue)\")};\n  border-radius: 0.5rem;\n  padding: 0.2rem 0.5rem;\n  cursor: pointer;\n  margin: 0.2rem 0.5rem 0.2rem 0;\n  transition: all 0.5s ease-in-out;\n  &:hover {\n    background: var(--lightBlue);\n    color: var(--mainBlue);\n  }\n  &:focus {\n    outline: none;\n  }\n`;\n","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\nimport {Button} from '../Button';\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n                <Link to=\"/\">\n                    <i className=\"navbar-brand\">\n                        Rakuten\n                    </i>\n                </Link>\n                <ul className=\"navbar-nav align-items-center\">\n                <li className=\"nav-items ml-5\">\n                <Link to=\"/\" className=\"nav-link\">   \n                    Products\n                </Link>   \n                </li>\n            </ul>\n            <Link to=\"/cart\" className=\"ml-auto\">   \n                <Button>\n                    <span className=\"mr-2\">\n                    <i className=\"fas fa-cart-plus mr-2\" />\n                     My Cart\n                    </span>\n                </Button>\n            </Link>\n            </nav>\n\n        );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n//import {storeProducts, detailProduct} from './data';\nimport axios from 'axios';\n\nconst ProductContext = React.createContext();\n\n// Provider\n// Consumer\n\nclass ProductProvider extends Component {\n    state = {\n        products : [],\n        cart: [],\n        detailProduct: {},\n        cartSubTotal : 0,\n        cartTax : 0,\n        cartTotal : 0\n    }\n    componentDidMount(){\n        //  this.setProducts();\n        // above line is required only if static data is used\n        axios.get(\"http://localhost:8080/phones\")\n        .then((response) => {\n            var prds = [...response.data];\n            this.setState({\n                products : prds,\n                detailProduct : prds[0]\n            })\n        })\n    }\n    setProducts = () => {\n        // let prds = [];\n        // storeProducts.forEach(p => {\n        //     let product = {...p};\n        //     prds = [...prds,product];\n        // });\n\n        // this.setState({\n        //     products: prds,\n        //     detailProduct : detailProduct\n        // })\n    }\n\n    getItem =(id) => {\n       let p = this.state.products.filter(prd => prd.id === id) [0];\n       return p;\n    }\n\n    handleDetail = (id) => {\n       console.log(\"detail \" + id);\n    }\n\n    addToCart = (id) => {\n        let p = this.getItem(id);\n        p.total = p.price;\n        p.count = 1;\n        p.inCart = true;\n        let cartContent = this.state.cart;\n        this.setState({\n            cart : [...cartContent, p]\n        }, () => this.addTotal())\n    }\n\n    increment = (id) => {\n        let p = this.getItem(id);\n        p.count += 1\n        p.total += p.price;\n        this.addTotal()\n    }\n\n    decrement = (id) => {\n        let p = this.getItem(id);\n        if (p.count === 1){\n            this.removeItem(id);\n        }\n        else{\n            p.count -= 1\n            p.total -= p.price;\n            this.addTotal();\n        }\n    }\n\n    removeItem = (id) => {\n        let cartcontent = this.state.cart;\n        let res = cartcontent.filter(p => p.id!==id)\n        this.setState({\n            cart : [...res]\n        }, () => this.addTotal())\n    }\n\n    clearCart = () => {\n        \n    }\n\n    checkOut = () => {\n       \n    }\n    addTotal = () => {\n        let subTotal = 0.0;\n        this.state.cart.map(item => {\n            subTotal += item.total;\n        }); \n\n        const tempTax = subTotal *0.1;\n        const tax = parseFloat(tempTax.toFixed(2));\n        const total = subTotal + tax ;\n        this.setState(() => {\n            return {\n                cartSubTotal : subTotal,\n                cartTax : tax,\n                cartTotal : total\n            }\n        });\n    }\n    render() {\n        return (\n            <ProductContext.Provider value={{\n                ...this.state,\n                handleDetail: this.handleDetail,\n                addToCart: this.addToCart,\n                increment: this.increment,\n                decrement: this.decrement,\n                removeItem : this.removeItem,\n                clearCart: this.clearCart,\n                checkOut: this.checkOut\n            }}>\n                {this.props.children}                \n            </ProductContext.Provider>\n        );\n    }\n}\n\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport {ProductProvider, ProductConsumer};","import React, { Component } from 'react'\nimport { Button } from '../../Button';\nimport { ProductConsumer } from '../../Context'\n\nexport default class Product extends Component {\n    render() {\n        const { id, img, inCart } = this.props.product;\n        return (\n            <ProductConsumer>\n                {\n                    value => {\n                        return <div className=\"col-md-4 col-lg-3\">\n                            <div className=\"card img-container my-2\">\n                                <img src={img} className=\"card-img-top\" />\n                                {\n                                    inCart ? (<\n                                        Button className=\"cart-btn\">In Cart</Button>) :\n                                        (<Button className=\"cart-btn\" onClick={(e) => value.addToCart(id)}><i className=\"fa fa-cart-plus\" /></Button>)\n                                }\n                            </div>\n                        </div>\n                    }\n                }\n            </ProductConsumer>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { ProductConsumer } from '../../Context'\nimport Product from './Product'\n\nexport default class ProductList extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                {/* container is from bootstrap it ensures components adjust according to size*/}\n                <div className=\"row\">\n                    <ProductConsumer>\n                        {\n                            value => {\n                                return value.products.map(product => {\n                                    return <Product product={product} key={product.id}/>\n                                })\n                            }\n                        }\n                    </ProductConsumer>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { ProductConsumer } from '../../Context'\nimport {Button} from '../../Button'\nexport default class CartList extends Component {\n    render() {\n        const { item } = this.props;\n        return (\n            <ProductConsumer>\n                {\n                    value => {\n                        return (\n                            <div className=\"row\">\n                                <div className=\"col-md-2\">\n                                    <img src={item.img} width=\"10px\" height=\"10px\"/>\n                                </div>\n                                <div className=\"col-md-2\">\n                                    {item.title}\n                                </div>\n                                <div className=\"col-md-2\">\n                                    <Button onClick={(e) => value.increment(item.id)}>+</Button>\n                                    <Button onClick={(e) => value.decrement(item.id)}>-</Button>\n                                </div>\n                                <div className=\"col-md-2\">\n                                    {item.count}\n                                </div>\n                                <div className=\"col-md-2\">\n                                    {item.price}\n                                </div>\n                                <div className=\"col-md-2\">\n                                    {item.total}\n                                </div>\n                            </div>\n                        )\n                    }\n                }\n            </ProductConsumer>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { ProductConsumer } from '../../Context'\nimport CartList from './CartList'\n\nexport default class Cart extends Component {\n    render() {\n        return (\n            <React.Fragment>\n            <ProductConsumer>\n                {\n                    value => {\n                        return value.cart.map(item => {\n                            return <CartList item={item}/>\n                        })\n                    }\n                }\n            </ProductConsumer>\n            </React.Fragment>\n        )\n    }\n}\n\n{/* <ProductConsumer>\n               {\n                   value => {\n                       return value.cart.map(item => {\n                           return <div className=\"container\">\n                                    <CartList item={item} />\n                                     <div className=\"float-right mx-10\">\n                                                SubTotal: {value.cartSubTotal}\n                                                <Button onClick={()=> value.checkOut()}>Checkout</Button>\n                                    </div>    \n                                    </div>\n                       })\n                    }\n               }\n\n           </ProductConsumer> */}","import React from 'react'\n\nexport default function Default() {\n    return (\n        <div>\n            Default Page!!!\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport {Route, Switch} from 'react-router-dom';\nimport Navbar from './components/NavBar';\nimport ProductList from './components/products/ProductList';\nimport Cart from './components/cart/Cart';\nimport Default from './components/Default';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar/>\n      <Switch>\n        <Route path=\"/cart\" component={Cart}/>\n        <Route exact path=\"/\" component={ProductList}/>\n        <Route component={Default}/>\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ProductProvider } from './Context';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<ProductProvider><Router><App /></Router></ProductProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}